;; storage scheme
;; storage#_ admin_address:MsgAddress user_order_code:^Cell = Storage;

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#pragma version >=0.2.0;

const storage_fee = 5000000; ;; 0.005 TON
const exec_fwd_fee = 30000000;  ;; 0.03 TON

(slice, cell, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; user_order_code
        ds~load_uint(32), ;; maturity
        ds~load_uint(32), ;; index
        ds~load_uint(256) ;; public_key
    );
}

() save_data(slice admin_address, cell user_order_code, int maturity, int index, int pub_key) impure inline {
    set_data(begin_cell()
        .store_slice(admin_address)
        .store_ref(user_order_code)
        .store_uint(maturity, 32)
        .store_uint(index, 32)
        .store_uint(pub_key, 256)
        .end_cell()
    );
}

(slice) mint_user_contract(slice owner_address, cell user_code, int maturity) impure {
    cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_code, maturity);
    slice to_contract_address = calculate_user_order_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_contract_address)
        .store_coins(storage_fee)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell().end_cell())
        .end_cell();
    send_raw_message(msg, 1); ;; revert on errors
    return to_contract_address;
}

() mint_principle_token(slice pt_addr, slice to_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_pt = begin_cell()
        .store_uint(op::mint(), 32)
        .store_uint(query_id, 64)
        .store_slice(to_addr)
        .store_coins(amount)
        .store_ref(begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(my_address())
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(0, 1)
            .end_cell())
        .end_cell();

    var msg_pt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(pt_addr)
        .store_coins(amount) ;; is it correct?
        .store_uint(1, 107)
        .store_ref(msg_body_pt)
        .end_cell();

    send_raw_message(msg_pt, 1); ;; revert on errors
}

() mint_yield_token(slice yt_addr, slice to_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_yt = begin_cell()
        .store_uint(op::mint(), 32)
        .store_uint(query_id, 64)
        .store_slice(to_addr)
        .store_coins(amount)
        .store_ref(begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(my_address())
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(0, 1)
            .end_cell())
        .end_cell();

    var msg_yt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(yt_addr)
        .store_coins(amount) ;; is it correct?
        .store_uint(1, 107)
        .store_ref(msg_body_yt)
        .end_cell();

    send_raw_message(msg_yt, 1); ;; revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    cs~load_coins();
    int op = in_msg_body~load_uint(32);
    in_msg_body~load_uint(64);
    (_, cell user_code, int maturity, _, _) = load_data();

    if (op == op::transfer_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        in_msg_body~load_msg_addr();
        cell fwd_msg = in_msg_body~load_ref();

        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);
        slice to_address = fwd_cs~load_msg_addr();
        fwd_cs~load_coins();

        slice user_contract_address = mint_user_contract(to_address, user_code, maturity);

        (slice yt_addr, slice pt_addr) = (fwd_cs~load_msg_addr(), fwd_cs~load_msg_addr());

        if (fwd_op == "supply"c) {
            mint_principle_token(pt_addr, user_contract_address, exec_fwd_fee, jetton_amount, fwd_query_id);
            mint_yield_token(yt_addr, user_contract_address, exec_fwd_fee, jetton_amount, fwd_query_id);
        }

        ;; TODO: send TONs left to the user back

        return ();
    }

    throw(0xffff);
}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    slice tmp_in_msg = in_msg;
    var hash = slice_hash(in_msg);

    (slice admin_addr, cell user_code, int maturity, _, int pub_key) = load_data();
    throw_unless(401, check_signature(hash, signature, pub_key));

    accept_message();

    tmp_in_msg~touch();

    int op = in_msg~load_uint(32);
    if (op == "update_index"c) {
        int new_index = in_msg~load_uint(32);
        save_data(admin_addr, user_code, maturity, new_index, pub_key);

        return ();
    }

    throw(0xffffff);
}

slice get_wallet_address(slice owner_address) method_id {
    (_, cell user_code, int maturity, _, _) = load_data();
    cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_code, maturity);
    return calculate_user_order_address(state_init);
}

int get_index() method_id {
    (_, _, _, int index, _) = load_data();
    return index;
}

int get_status() method_id {
    return 0;
}