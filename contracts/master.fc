#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#pragma version >=0.2.0;

const storage_fee = 5000000; ;; 0.005 TON
const exec_fwd_fee = 30000000;  ;; 0.03 TON

{- storage scheme
;; The storage scheme consists of the following data fields:
;; - admin_address: The address of the contract administrator (MsgAddress).
;; - user_code: The user order code (Cell).
;; - underlying_asset_minter_addr: The address of the underlying asset minter (MsgAddress).
;; - underlying_asset_master_wallet_addr: The address of the underlying asset master wallet (MsgAddress).
;; - meta_data: Metadata related to the contract (Cell).
;; - tokens_data: Information about the tokens (Cell).
-}

(slice, cell, slice, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; user_code
        ds~load_msg_addr(), ;; underlying_asset_minter_addr
        ds~load_msg_addr(), ;; underlying_asset_master_wallet_addr
        ds~load_ref(), ;; meta data
        ds~load_ref() ;; tokens data
    );
}

() save_data(slice admin_address, cell user_order_code, slice underlying_asset_addr, slice underlying_master_wallet_addr, int maturity, int index, int pub_key, cell tokens_data) impure inline {
    var meta_data = begin_cell()
        .store_uint(maturity, 32)
        .store_uint(index, 32)
        .store_uint(pub_key, 256)
        .end_cell();

    set_data(begin_cell()
        .store_slice(admin_address)
        .store_ref(user_order_code)
        .store_slice(underlying_asset_addr)
        .store_slice(underlying_master_wallet_addr)
        .store_ref(meta_data)
        .store_ref(tokens_data)
        .end_cell()
    );
}

(int, int, int) load_meta_data(cell meta) inline {
    slice cs = meta.begin_parse();
    return (cs~load_uint(32), cs~load_uint(32), cs~load_uint(256));
}

(slice, slice, slice) load_tokens_data(cell data) inline {
    slice cs = data.begin_parse();
    return (cs~load_msg_addr(), cs~load_msg_addr(), cs~load_msg_addr());
}

{-
  Function to mint a user contract.
  This function initializes the state of the user contract and sends a message to create it.
  Parameters:
  - owner_address: The address of the contract owner.
  - user_code: The code for the user contract.
  - maturity: The maturity date of the yield-bearing asset.
  - pt_minter_addr: The address of the Principal Token minter.
  - yt_minter_addr: The address of the Yield Token minter.
  Returns:
  - The address of the newly created user contract.
-}

slice mint_user_contract(slice owner_address, cell user_code, int maturity, slice pt_minder_addr, yt_minter_addr) impure {
    cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_code, maturity, pt_minder_addr, yt_minter_addr);
    slice to_contract_address = calculate_user_order_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_contract_address)
        .store_coins(storage_fee)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell().end_cell())
        .end_cell();
    send_raw_message(msg, 1);
    return to_contract_address;
}

{-
  Function to mint Principal Tokens (PT).
  This function constructs and sends a message to mint PTs and handle their internal transfer.
  Parameters:
  - pt_addr: The address of the Principal Token.
  - to_addr: The recipient address for the minted tokens.
  - amount: The amount of TONs to be transferred.
  - jetton_amount: The amount of jettons to be transferred.
  - query_id: A unique identifier for the query.
-}

() mint_principle_token(slice pt_addr, slice to_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_pt = begin_cell()
        .store_uint(op::mint(), 32)
        .store_uint(query_id, 64)
        .store_slice(to_addr)
        .store_coins(amount)
        .store_ref(begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(my_address())
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(0, 1)
            .end_cell())
        .end_cell();

    var msg_pt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(pt_addr)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(msg_body_pt)
        .end_cell();

    send_raw_message(msg_pt, 0);
}

{-
  Function to mint Yield Tokens (YT).
  This function constructs and sends a message to mint YTs and handle their internal transfer.
  Parameters:
  - pt_addr: The address of the Principal Token.
  - to_addr: The recipient address for the minted tokens.
  - amount: The amount of TONs to be transferred.
  - jetton_amount: The amount of jettons to be transferred.
  - query_id: A unique identifier for the query.
-}

() mint_yield_token(slice yt_addr, slice to_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_yt = begin_cell()
        .store_uint(op::mint(), 32)
        .store_uint(query_id, 64)
        .store_slice(to_addr)
        .store_coins(amount)
        .store_ref(begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(my_address())
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(0, 1)
            .end_cell())
        .end_cell();

    var msg_yt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(yt_addr)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(msg_body_yt)
        .end_cell();

    send_raw_message(msg_yt, 0);
}

{-
  Function to claim interest.
  This function constructs and sends a message to user contract to calculate the interest
  earned by the user and also it send updated index to the user contract.

  Parameters:
  - query_id: A unique identifier for the query.
  - index: The current index value for yield calculation.
  - user_contract_addr: The address of the user contract.
  - ts_master_address: tsTON address of the master contract.
-}

() claim_interest(int query_id, int index, slice user_contract_addr, slice ts_master_address) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::claim_interest(), 32)
        .store_uint(query_id, 64)
        .store_uint(index, 32)
        .store_slice(ts_master_address)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(user_contract_addr)
        .store_coins(exec_fwd_fee)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);
}

{-
  Function to redeem tokens.
  This function constructs and sends a message to tsTON Master's Jetton Wallet to send a transfer to a user.
  Parameters:
  - ts_master_address: tsTON Wallet Master address.
  - query_id: A unique identifier for the query.
  - redeem_amount: The amount of tokens to be transfered.
  - to_addr: The recipient address for the redeemed tokens.
-}

() redeem(slice ts_master_address, int query_id, int redeem_amount, slice to_addr) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(redeem_amount)
        .store_slice(to_addr)
        .store_slice(to_addr)
        .store_uint(0, 1)
        .store_coins(exec_fwd_fee)
        .store_uint(0, 1)
        .store_ref(begin_cell()
            .store_uint(777, 32)
            .store_uint(query_id, 64)
            .store_coins(redeem_amount)
            .end_cell())
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(ts_master_address)  
        .store_coins(0) ;; 0 because 64 mode
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);
}

{-
  Function to send interest.
  This function constructs and sends a message to transfer the interest to the user. Interest transfered in tsTON (because in this Master contract tsTON is yield bearing asset)
  Parameters:
  - interest: The amount of interest to be transferred.
  - ts_master_address: The address of the master contract (e.g., tsTON Wallet Master address).
  - query_id: A unique identifier for the query.
  - to_addr: The recipient address for the interest.
  - fwd_amount: The amount of TONs to forward.
-}

() send_interest(int interest, slice ts_master_address, int query_id, slice to_addr, int fwd_amount) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(interest)
        .store_slice(to_addr)
        .store_slice(to_addr) 
        .store_uint(0, 1)
        .store_coins(fwd_amount)
        .store_uint(0, 1)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(ts_master_address) 
        .store_coins(0) ;; 0 because 64 mode
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);
}

{-
  Function to send Yield Token balance and index to the user contract.
  This function constructs and sends a message to update the user's contract with the YT balance and current index.
  Parameters:
  - user_contract_addr: The address of the user's contract.
  - query_id: A unique identifier for the query.
  - yt_amount: The amount of Yield Tokens that was minted.
  - index: The current index value for interest calculation.
-}

() send_ytbalance_index_to_user(slice user_contract_addr, int query_id, int yt_amount, int index) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::send_ytbalance_index(), 32)
        .store_uint(query_id, 64)
        .store_coins(yt_amount)
        .store_uint(index, 32)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(user_contract_addr) 
        .store_coins(exec_fwd_fee)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 0);
}


() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    cs~load_coins();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice admin_addr, cell user_code, slice underlying_asset_addr, slice underlying_master_wallet_addr, cell meta, cell tokens_data) = load_data();

    (int maturity, int index, int pub_key) = load_meta_data(meta);
    slice tokens = tokens_data.begin_parse();
    slice pt_minter_addr = tokens~load_msg_addr();
    slice yt_minter_addr = tokens~load_msg_addr();
    slice master_ton_addr = tokens~load_msg_addr();

    {-
        "transfer_notification", process the yeild tokenezation process and minting PT/YT tokens.
        When a notification of a transfer of tsTON to the Master contract recieved the proccess is initialized.
        This involves loading the amount of jettons, extracting the forward message, minting user contracts 
        (creating an instance of user contract where the information of user interest will be stored), 
        minting principal and yield tokens for the user, and sending the YT balance and index to the user contract.
    -}

    if (op == op::transfer_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        in_msg_body~load_msg_addr();
        cell fwd_msg = in_msg_body~load_ref();

        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);
        slice to_address = fwd_cs~load_msg_addr();
        fwd_cs~load_coins();

        slice user_contract_address = mint_user_contract(to_address, user_code, maturity, pt_minter_addr, yt_minter_addr);
        (slice yt_addr, slice pt_addr) = (fwd_cs~load_msg_addr(), fwd_cs~load_msg_addr());

        int mint_amount = jetton_amount * index / 1000; ;; mint amount should be adjusted to index

        if (fwd_op == "supply"c) {
            mint_principle_token(pt_addr, to_address, exec_fwd_fee, mint_amount, fwd_query_id);
            mint_yield_token(yt_addr, to_address, exec_fwd_fee, mint_amount, fwd_query_id);
            send_ytbalance_index_to_user(user_contract_address, query_id, mint_amount, index);
            save_data(admin_addr, user_code, underlying_asset_addr, underlying_master_wallet_addr, maturity, index, pub_key, tokens_data);
        }

        return ();
    }

    {-
        "send_claim_interest", process the interest claim request from the user.
        This involves extracting the tsTON master address, calculating the user order address,
        and sending claiming interest request to the user contract.
    -}
    if (op == op::send_claim_interest()) {
        in_msg_body~load_coins();
        slice ts_master_address = in_msg_body~load_msg_addr();
        cell state_init = calculate_user_order_state_init(sender_addr, my_address(), user_code, maturity, pt_minter_addr, yt_minter_addr);
        slice to_contract_address = calculate_user_order_address(state_init);

        claim_interest(query_id, index, to_contract_address, ts_master_address);

        return ();
    }

    {-
        "send_interest", process the request to send interest from user contract.
        This involves loading the interest amount, calculating the amount of tsTON to send based on the index,
        extracting the master and recipient addresses, and sending the interest calculated in tsTON to the user.
    -}

    if (op == op::send_interest()) {
        int interest = in_msg_body~load_uint(32);
        int send_ts = (interest * 1000) / index;
        slice ts_master_address = in_msg_body~load_msg_addr();
        slice to_addr = in_msg_body~load_msg_addr();
        send_interest(send_ts, ts_master_address, query_id, to_addr, exec_fwd_fee);

        return ();
    }
    {-
        "redeem_notification", process the notification.
        This involves loading the jetton amount, extracting the user address, calculating the redeem amount based on the index,
        and sending to the user corresponding amount in tsTONs.
    -}
    if (op == "redeem_notification"c) {
        int jetton_amount = in_msg_body~load_coins();
        slice user_addr = in_msg_body~load_msg_addr();

        int redeam_res = jetton_amount / index * 1000;
        redeem(master_ton_addr, query_id, redeam_res, user_addr);

        return ();
    }

    throw(0xffff);
}

{-
  Function to handle external messages.
  This function verifies the signature of the incoming message, processes the operation specified in the message, and updates the contract state accordingly.
  Parameters:
  - in_msg: The incoming message slice.
-}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    slice tmp_in_msg = in_msg;
    var hash = slice_hash(in_msg);

    (slice admin_addr, cell user_code, slice underlying_asset_addr, slice underlying_asset_master_wallet_addr, cell meta, cell tokens_data) = load_data();
    (int maturity, int index, int pub_key) = load_meta_data(meta);
    throw_unless(401, check_signature(hash, signature, pub_key));

    accept_message();

    tmp_in_msg~touch();

    int op = in_msg~load_uint(32);

    {-
     "update_index", extract the new index from the incoming message
      and update the contract's stored data with the new index.
      This index is coming from tsTON smart contract on Mainnet, in our repo the code that extract and update the index also published.
    -}

    if (op == "update_index"c) {
        int new_index = in_msg~load_uint(32);
        save_data(admin_addr, user_code, underlying_asset_addr, underlying_asset_master_wallet_addr, maturity, new_index, pub_key, tokens_data);

        return ();
    }

    {-
      "set_pt_minder_addr", update the Principal Token minter address.
      This address updated once after deploying the master smart contract. It cannot be set during the initialization of the master contract because the master contract is used for creating these addresses.
    -}

    if (op == "set_pt_minder_addr"c) {
        slice minter_addr = in_msg~load_msg_addr();

        save_data(admin_addr, user_code, underlying_asset_addr, underlying_asset_master_wallet_addr, maturity, index, pub_key, begin_cell().store_slice(minter_addr).store_slice(minter_addr).store_slice(minter_addr).end_cell());

        return ();
    }

    {-
      "set_yt_minder_addr", update the Yield Token minter address.
      This address updated once after deploying the master smart contract. It cannot be set during the initialization of the master contract because the master contract is used for creating these addresses.
    -}
    if (op == "set_yt_minder_addr"c) {
        slice minter_addr = in_msg~load_msg_addr();
        (slice pt_add, _, _) = load_tokens_data(tokens_data);

        save_data(admin_addr, user_code, underlying_asset_addr, underlying_asset_master_wallet_addr, maturity, index, pub_key, begin_cell().store_slice(pt_add).store_slice(minter_addr).store_slice(minter_addr).end_cell());

        return ();
    }

    {-
      "set_master_ton_addr", update the Master tsTON Jetton Wallet address.
      This address updated once after deploying the master smart contract. It cannot be set during the initialization of the master contract because the master contract is used for creating these addresses.
    -}
        if (op == "set_master_ton_addr"c) {
        slice master_ton_addr = in_msg~load_msg_addr();
        (slice pt_add,slice yt_addr, _) = load_tokens_data(tokens_data);

        save_data(admin_addr, user_code, underlying_asset_addr, underlying_asset_master_wallet_addr, maturity, index, pub_key, begin_cell().store_slice(pt_add).store_slice(yt_addr).store_slice(master_ton_addr).end_cell());

        return ();
    }

    throw(0xffffff);
}

{-
  Below are the get methods for the contract.
  These methods allow retrieving specific pieces of information from the contract's storage.
-}

slice get_wallet_address(slice owner_address) method_id {
    (_, cell user_code, _, _, cell meta, cell tokens_data) = load_data();
    (int maturity, _, _) = load_meta_data(meta);
    (slice pt_minter_addr, slice yt_minder_addr, _) = load_tokens_data(tokens_data);
    cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_code, maturity, pt_minter_addr, yt_minder_addr);
    return calculate_user_order_address(state_init);
}

int get_index() method_id {
    (_, _, _, _, cell meta, _) = load_data();
    (_, int index, _) = load_meta_data(meta);
    return index;
}

slice get_underlying_asset_wallet_addr() method_id {
    (_, _, _, slice addr, _, _) = load_data();
    return addr;
}

slice get_underlying_asset_minter_addr() method_id {
    (_, _, slice addr, _, _, _) = load_data();
    return addr;
}

(slice, slice) get_pt_yt_minter_addr() method_id {
    (_, _, _, _, _, cell tokens_data) = load_data();
    (slice pt, slice yt, _) = load_tokens_data(tokens_data);
    return (pt, yt);
}

(slice) get_master_ton_addr() method_id {
    (_, _, _, _, _, cell tokens_data) = load_data();
    (_,_, slice master_ton_addr) = load_tokens_data(tokens_data);
    return (master_ton_addr);
}


int get_status() method_id {
    return 0;
}