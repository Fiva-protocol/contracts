;; storage scheme
;; storage#_ admin_address:MsgAddress user_order_code:^Cell = Storage;

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#pragma version >=0.2.0;


const storage_fee = 5000000; ;; 0.005 TON
const exec_fwd_fee = 30000000;  ;; 0.03 TON

(slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref() ;; user_order_code
    );
}

() save_data(slice admin_address, cell user_order_code) impure inline {
    set_data(begin_cell()
        .store_slice(admin_address)
        .store_ref(user_order_code)
        .end_cell()
    );
}

(slice) mint_order_contract(slice owner_address, cell user_code) impure {
    cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_code);
    slice to_contract_address = calculate_user_order_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_contract_address)
        .store_coins(storage_fee)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell().end_cell())
        .end_cell();
    send_raw_message(msg, 1); ;; revert on errors
    return to_contract_address;
}

() send_tokens(slice wallet_address, slice to_address, int jetton_amount, int query_id, cell fwd_msg) impure {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(to_address)
        .store_slice(to_address)
        .store_uint(0, 1)
        .store_coins(exec_fwd_fee)
        .store_uint(1, 1)
        .store_ref(fwd_msg)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(wallet_address)
        .store_coins(exec_fwd_fee * 3)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();
    send_raw_message(msg, 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (_, cell user_code) = load_data();

    if (op == op::transfer_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice to_address = in_msg_body~load_msg_addr();
        cell fwd_msg = in_msg_body~load_ref();
        slice user_contract_address = mint_order_contract(to_address, user_code);

        send_tokens(sender_address, user_contract_address, jetton_amount, query_id, fwd_msg);
        ;; TODO: send TONs left to the user back
        return ();
    }

    throw(0xffff);
}

slice get_wallet_address(slice owner_address) method_id {
    (_, cell user_code) = load_data();
    cell state_init = calculate_user_order_state_init(owner_address, my_address(), user_code);
    return calculate_user_order_address(state_init);
}