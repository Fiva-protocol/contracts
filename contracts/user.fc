;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const exec_fwd_fee = 30000000;  ;; 0.03 TON

;; storage:
;; creator address
;; master contract address
;; maturity
;; index
;; interest
(slice, slice, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_uint(32)
    );
}

() save_data(slice owner, slice master_contract, int maturity, int index, int interest) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_uint(maturity, 32)
        .store_uint(index, 32)
        .store_uint(interest, 32)
        .end_cell());
}

() on_bounce(slice in_msg_body) impure {
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_notification()) {
        (int jetton_amount, slice from_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        cell fwd_msg = in_msg_body~load_ref();
        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);

        return ();
    }

    if (op == op::excesses()) {
        return ();
    }

    throw(0xffff);
}

slice get_master_addr() method_id {
    (_, slice master_addr, _, _, _) = load_data();
    return master_addr;
}

int get_maturity() method_id {
    (_, _, int maturity, _, _) = load_data();
    return maturity;
}

int get_index() method_id {
    (_, _, _, int index, _) = load_data();
    return index;
}

int get_interest() method_id {
    (_, _, _, _, int interest) = load_data();
    return interest;
}