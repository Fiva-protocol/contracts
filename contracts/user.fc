;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const exec_fwd_fee = 30000000;  ;; 0.03 TON

const AFTER_MATURITY = 0;
const BEFORE_MATURITY = 1;

;; storage:
;; creator address
;; master contract address
;; maturity
;; index
;; interest
;; ytbalance
(slice, slice, int, int, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_coins(),
        ds~load_uint(2)
    );
}

() save_data(slice owner, slice master_contract, int maturity, int index, int interest, int yt_balance, int burn_count) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_uint(maturity, 32)
        .store_uint(index, 32)
        .store_uint(interest, 32)
        .store_coins(yt_balance)
        .store_uint(burn_count, 2)
        .end_cell());
}

() on_bounce(slice in_msg_body) impure {
}

() send_cacl_interest(int interest, slice master_address, int query_id, slice ts_master_address, slice owner) impure {
    var msg_body = begin_cell()
        .store_uint(op::send_interest(), 32)
        .store_uint(query_id, 64)
        .store_uint(interest, 32)
        .store_slice(ts_master_address)
        .store_slice(owner)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(master_address)
        .store_coins(0) 
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);
}

() send_jettons(slice to_address, slice owner_addr, slice master_walelt_addr, int maturity_type, int jetton_amount, int query_id) impure {
    var msg_body = begin_cell()
        .store_uint("redeem_notification"c, 32)
        .store_uint(query_id, 64)
        .store_uint(maturity_type, 32)
        .store_coins(jetton_amount)
        .store_slice(owner_addr)
        .store_slice(master_walelt_addr)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_coins(100000000)
        .store_uint(1, 107)
        .store_ref(msg_body).end_cell();

    send_raw_message(msg, 0); 
}

() burn_token(slice token_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_pt = begin_cell()
        .store_uint(op::burn(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(my_address())
        .end_cell();

    var msg_pt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(token_addr)
        .store_coins(amount) 
        .store_uint(1, 107)
        .store_ref(msg_body_pt)
        .end_cell();

    send_raw_message(msg_pt, 1 + 16); 
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    int amount = cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    cs~load_coins();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice owner_addr, slice master_addr, int maturity, int index, int interest, int yt_balance, int burn_count) = load_data();

    if (op == op::transfer_notification()) {
        int jetton_amounts = in_msg_body~load_coins();

        cell fwd_msg = in_msg_body~load_ref();
        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);
        slice pt_addr = fwd_cs~load_msg_addr();
        slice yt_addr = fwd_cs~load_msg_addr();
        slice master_wallet_addr = fwd_cs~load_msg_addr();

        if (fwd_op == "redeem"c) {
            var maturity_type = AFTER_MATURITY;
            if (now() < maturity) {
                ;; before maturity
                if (burn_count == 0) {
                    save_data(owner_addr, master_addr, maturity, index, interest, yt_balance, 1);

                    return ();
                } else {
                    in_msg_body~load_msg_addr();
                    in_msg_body~skip_bits(1);

                    yt_balance -= jetton_amounts;

                    burn_token(pt_addr, exec_fwd_fee, jetton_amounts, fwd_query_id);
                    burn_token(yt_addr, exec_fwd_fee, jetton_amounts, fwd_query_id);

                    maturity_type = BEFORE_MATURITY;

                    save_data(owner_addr, master_addr, maturity, index, interest, yt_balance, 0);
                }
            } else {
                in_msg_body~load_msg_addr();
                in_msg_body~skip_bits(1);

                burn_token(pt_addr, exec_fwd_fee, jetton_amounts, fwd_query_id);
            }

            send_jettons(master_addr, owner_addr, master_wallet_addr, maturity_type, jetton_amounts, fwd_query_id);

            return ();
        }
    }

    if (op == op::excesses()) {
        ;; burn PT and YT send excesses op code
        return ();
    }

    if (op == op::claim_interest()) {
        int new_index = in_msg_body~load_uint(32);
        slice ts_master_address = in_msg_body~load_msg_addr();
        int d_interest = yt_balance * ((1000000 / index) - (1000000 / new_index));
        interest += d_interest;
        int new_interest = interest / 1000;
        save_data(owner_addr, master_addr, maturity, index, new_interest, yt_balance, burn_count);
        send_cacl_interest(new_interest, master_addr, query_id, ts_master_address, owner_addr);

        return ();
    }

    if (op == op::send_ytbalance_index()) {
        int yt_mint = in_msg_body~load_coins();
        yt_balance += yt_mint;
        int new_index = in_msg_body~load_uint(32);
        save_data(owner_addr, master_addr, maturity, new_index, interest, yt_balance, burn_count);

        return ();
    }

    throw(0xffff);
}

slice get_master_addr() method_id {
    (_, slice master_addr, _, _, _, _, _) = load_data();
    return master_addr;
}

int get_maturity() method_id {
    (_, _, int maturity, _, _, _, _) = load_data();
    return maturity;
}

int get_index() method_id {
    (_, _, _, int index, _, _, _) = load_data();
    return index;
}

int get_interest() method_id {
    (_, _, _, _, int interest, _, _) = load_data();
    return interest;
}

int get_yt_balance() method_id {
    (_, _, _, _, _, int yt_balance, _) = load_data();
    return yt_balance;
}