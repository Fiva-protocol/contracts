;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const exec_fwd_fee = 30000000;  ;; 0.03 TON

;; storage:
;; creator address
;; master contract address
;; supplies dict
(slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_dict());
}

() save_data(slice owner, slice master_contract, cell supplies) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_dict(supplies)
        .end_cell());
}

() supply_jettons(slice from_addr, int from_amount, slice fwd_cs, slice master_addr, int query_id) impure {
    slice to_addr = fwd_cs~load_msg_addr();
    int amount = fwd_cs~load_coins();
    slice to_master_address = fwd_cs~load_msg_addr();

    (slice owner, slice master_contract, cell supplies) = load_data();
    throw_unless(407, equal_slices(master_addr, master_contract));

    var msg_body = begin_cell()
        .store_uint(op::mint(), 32)
        .store_uint(query_id, 64)
        .store_slice(to_addr)
        .store_ref(begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(my_address())
            .store_slice(my_address())
            .store_coins(0)
            .store_uint(0, 1)
            .end_cell())
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_master_address)
        .store_coins(1000)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64); ;; revert on errors

    var new_supply = begin_cell();
    new_supply = new_supply.store_slice(from_addr);
    new_supply = new_supply.store_coins(from_amount);
    new_supply = new_supply.store_slice(to_addr);
    new_supply = new_supply.store_coins(amount);
    new_supply = new_supply.store_slice(to_master_address);

    randomize_lt();
    int new_order_id = random();
    supplies~udict_set_ref(256, new_order_id, new_supply.end_cell());
    save_data(owner, master_contract, supplies);
}

() on_bounce(slice in_msg_body) impure {

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer_notification()) {
        (int jetton_amount, slice from_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        cell fwd_msg = in_msg_body~load_ref();
        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);

        if (fwd_op == "supply"c) {
            supply_jettons(sender_address, jetton_amount, fwd_cs, from_address, fwd_query_id);
        }

        return ();
    }

    if (op == op::excesses()) {
        return ();
    }

    throw(0xffff);
}

slice get_master_addr() method_id {
    (_, slice master_addr, _) = load_data();
    return master_addr;
}

(cell) get_supplies_data() method_id {
    (_, _, cell supplies) = load_data();
    return supplies;
}