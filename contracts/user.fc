;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const exec_fwd_fee = 30000000;  ;; 0.03 TON

const AFTER_MATURITY = 0;
const BEFORE_MATURITY = 1;

;; storage:
;; creator address
;; master contract address
;; maturity
;; index
;; interest
(slice, slice, int, int, int) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_uint(32)
    );
}

() save_data(slice owner, slice master_contract, int maturity, int index, int interest) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_uint(maturity, 32)
        .store_uint(index, 32)
        .store_uint(interest, 32)
        .end_cell());
}

() on_bounce(slice in_msg_body) impure {
}

() send_jettons(slice to_address, int maturity_type, int jetton_amount, int query_id) impure {
    var msg_body = begin_cell()
        .store_uint("redeem_notification"c, 32)
        .store_uint(query_id, 64)
        .store_uint(maturity_type, 8)
        .store_coins(jetton_amount)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_coins(exec_fwd_fee)
        .store_uint(1, 107)
        .store_ref(msg_body).end_cell();

    send_raw_message(msg, 0); ;; revert on errors
}

() burn_token(slice token_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_pt = begin_cell()
        .store_uint(op::burn(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(my_address())
        .end_cell();

    var msg_pt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(token_addr)
        .store_coins(amount) ;; is it correct?
        .store_uint(1, 107)
        .store_ref(msg_body_pt)
        .end_cell();

    send_raw_message(msg_pt, 1 + 16); ;; revert on errors
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    int amount = cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    cs~load_coins();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (_, slice master_addr, int maturity, _, _) = load_data();

    if (op == op::excesses()) {
        ;; burn PT and YT send excesses op code
        return ();
    }

    if (op == "redeem"c) {
        var maturity_type = AFTER_MATURITY;
        int jetton_amounts = in_msg_body~load_coins();
        if (now() < maturity) {
            ;; before maturity
            in_msg_body~load_msg_addr();
            in_msg_body~skip_bits(1);

            slice pt_addr = in_msg_body~load_msg_addr();
            slice yt_addr = in_msg_body~load_msg_addr();

            burn_token(pt_addr, exec_fwd_fee, jetton_amounts, query_id);
            burn_token(yt_addr, exec_fwd_fee, jetton_amounts, query_id);

            maturity_type = BEFORE_MATURITY;
        } else {
            in_msg_body~load_msg_addr();
            in_msg_body~skip_bits(1);

            slice pt_addr = in_msg_body~load_msg_addr();

            burn_token(pt_addr, exec_fwd_fee, jetton_amounts, query_id);
        }

        send_jettons(master_addr, maturity_type, jetton_amounts, query_id);

        return ();
    }

    throw(0xffff);
}

slice get_master_addr() method_id {
    (_, slice master_addr, _, _, _) = load_data();
    return master_addr;
}

int get_maturity() method_id {
    (_, _, int maturity, _, _) = load_data();
    return maturity;
}

int get_index() method_id {
    (_, _, _, int index, _) = load_data();
    return index;
}

int get_interest() method_id {
    (_, _, _, _, int interest) = load_data();
    return interest;
}