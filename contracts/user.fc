;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const JETTON_JETTON = 0;
const JETTON_TON = 1;
const TON_JETTON = 2;

const exec_fwd_fee = 30000000;  ;; 0.03 TON

;; storage:
;; creator address
;; master contract address
;; orders dict
(slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_msg_addr(), ds~load_msg_addr(), ds~load_dict());
}

() save_data (slice owner, slice master_contract, cell orders) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_dict(orders)
        .end_cell());
}

() send_jettons (slice wallet_address, slice to_address, int jetton_amount, int query_id) impure {
    var msg_body = begin_cell()
        .store_uint(op::transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(to_address)
        .store_slice(to_address)
        .store_uint(0, 1)
        .store_coins(0)
        .store_uint(0, 1)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(wallet_address)
        .store_coins(exec_fwd_fee * 2)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();
    send_raw_message(msg, 1); ;; revert on errors
}

() send_ton (slice to_address, int amount) impure {
    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 107)
        .end_cell();
    send_raw_message(msg, 1);
}

() create_jetton_jetton_order (slice from_addr, int from_amount, slice msg_cs, slice msg_from_addr) impure {
    slice to_addr = msg_cs~load_msg_addr();
    int to_amount = msg_cs~load_coins();
    slice to_master_address = msg_cs~load_msg_addr();

    (slice owner, slice master_contract, cell orders) = load_data();
    throw_unless(407, equal_slices(msg_from_addr, master_contract));

    var new_order = begin_cell().store_uint(JETTON_JETTON, 8);
    new_order = new_order.store_slice(from_addr);
    new_order = new_order.store_coins(from_amount);
    new_order = new_order.store_slice(to_addr);
    new_order = new_order.store_coins(to_amount);
    new_order = new_order.store_slice(to_master_address);

    randomize_lt();
    int new_order_id = random();
    orders~udict_set_ref(256, new_order_id, new_order.end_cell());
    save_data(owner, master_contract, orders);
}

() create_jetton_ton_order (slice from_addr, int from_amount, slice msg_cs, slice msg_from_addr) impure {
    int to_amount = msg_cs~load_coins();

    (slice owner, slice master_contract, cell orders) = load_data();
    throw_unless(407, equal_slices(msg_from_addr, master_contract));

    var new_order = begin_cell().store_uint(JETTON_TON, 8);
    new_order = new_order.store_slice(from_addr);
    new_order = new_order.store_coins(from_amount);
    new_order = new_order.store_coins(to_amount);

    randomize_lt();
    int new_order_id = random();
    orders~udict_set_ref(256, new_order_id, new_order.end_cell());
    save_data(owner, master_contract, orders);
}

() create_ton_jetton_order (int from_amount, slice to_addr, int to_amount, slice to_master_address, slice msg_from_addr) impure {
    (slice owner, slice master_contract, cell orders) = load_data();
    throw_unless(407, equal_slices(msg_from_addr, master_contract));

    var new_order = begin_cell().store_uint(TON_JETTON, 8);
    new_order = new_order.store_coins(from_amount);
    new_order = new_order.store_slice(to_addr);
    new_order = new_order.store_coins(to_amount);
    new_order = new_order.store_slice(to_master_address);

    randomize_lt();
    int new_order_id = random();
    orders~udict_set_ref(256, new_order_id, new_order.end_cell());
    save_data(owner, master_contract, orders);
}

() close_order (slice sender, int order_id, int query_id) impure {
    (slice owner, slice master_contract, cell orders) = load_data();
    throw_unless(403, equal_slices(sender, owner));

    (cell order, int ok) = udict_get_ref?(orders, 256, order_id);
    throw_unless(404, ok == -1);

    slice order_cs = order.begin_parse();
    int order_type = order_cs~load_uint(8);
    slice order_from_address = (order_type != TON_JETTON) ? order_cs~load_msg_addr() : null();
    int order_from_amount = order_cs~load_coins();

    if (order_type == TON_JETTON) {
        send_ton(sender, order_from_amount);
    } else {
        send_jettons(order_from_address, sender, order_from_amount, query_id);
    }

    orders~udict_delete?(256, order_id);
    save_data(owner, master_contract, orders);
}

() execute_order (slice executor_address, slice ex_to_address, int ex_to_amount, int order_id, int query_id) impure {
    (slice owner, slice master_contract, cell orders) = load_data();

    (cell order, int ok) = udict_get_ref?(orders, 256, order_id);
    throw_unless(404, ok == -1);

    slice order_cs = order.begin_parse();
    int order_type = order_cs~load_uint(8);
    slice order_from_address = (order_type != TON_JETTON) ? order_cs~load_msg_addr() : null();
    int order_from_amount = order_cs~load_coins();

    slice order_to_address = null();
    if (order_type != JETTON_TON) {
        order_to_address = order_cs~load_msg_addr();
        throw_unless(405, equal_slices(order_to_address, ex_to_address));
    }

    int order_to_amount = order_cs~load_coins();
    ;; TODO: for jetton-ton orders we should check order_to_amount <= ex_to_amount + commission
    throw_unless(406, order_to_amount <= ex_to_amount);

    ;; send tokens to order creator
    if (order_type == JETTON_TON) {
        send_ton(owner, order_to_amount);
    } else {
        send_jettons(order_to_address, owner, order_to_amount, query_id);
    }

    ;; send order tokens to executor + reward
    if (order_type == TON_JETTON) {
        send_ton(executor_address, order_from_amount);
    } else {
        send_jettons(order_from_address, executor_address, order_from_amount, query_id);
    }

    orders~udict_delete?(256, order_id);
    save_data(owner, master_contract, orders);
}

() on_bounce (slice in_msg_body) impure {

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == "create_ton_order"c) {
        int from_amount = in_msg_body~load_coins();
        slice to_jetton_addr = in_msg_body~load_msg_addr();
        int to_amount = in_msg_body~load_coins();
        slice to_master_address = in_msg_body~load_msg_addr();
        create_ton_jetton_order(from_amount, to_jetton_addr, to_amount, to_master_address, sender_address);
        return ();
    }

    if (op == "execute_ton_order"c) {
        int order_id = in_msg_body~load_uint(256);
        execute_order(sender_address, sender_address, msg_value, order_id, query_id);
        return ();
    }

    if (op == "close_order"c) {
        int order_id = in_msg_body~load_uint(256);
        close_order(sender_address, order_id, query_id);
        return ();
    }

    if (op == op::transfer_notification()) {
        (int jetton_amount, slice from_address) = (in_msg_body~load_coins(), in_msg_body~load_msg_addr());
        cell fwd_msg = in_msg_body~load_ref();
        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);

        if (fwd_op == "create_order"c) {
            int order_type = fwd_cs~load_uint(8);
            if (order_type == JETTON_JETTON) {
                create_jetton_jetton_order(sender_address, jetton_amount, fwd_cs, from_address);
            } else {
                create_jetton_ton_order(sender_address, jetton_amount, fwd_cs, from_address);
            }
        }

        if (fwd_op == "execute_order"c) {
            int order_id = fwd_cs~load_uint(256);
            execute_order(from_address, sender_address, jetton_amount, order_id, fwd_query_id);
        }

        return ();
    }

    throw(0xffff);
}

(cell) get_orders_data() method_id {
    (_, _, cell orders) = load_data();
    return orders;
}