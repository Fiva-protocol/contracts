;; User Order Smart Contract

#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#pragma version >=0.2.0;

const exec_fwd_fee = 30000000;  ;; 0.03 TON


{- storage scheme
;; The storage scheme consists of the following data fields:
;; - creator address (MsgAddress)
;; - master contract address (MsgAddress)
;; - maturity (Int)
;; - index (Int)
;; - interest (Int)
;; - ytbalance (Int)
;; - burn meta information (Cell)
-}

(slice, slice, int, int, int, int, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(),
        ds~load_msg_addr(),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_uint(32),
        ds~load_coins(),
        ds~load_ref()
    );
}

() save_data(slice owner, slice master_contract, int maturity, int index, int interest, int yt_balance, cell burn) impure inline {
    set_data(begin_cell()
        .store_slice(owner)
        .store_slice(master_contract)
        .store_uint(maturity, 32)
        .store_uint(index, 32)
        .store_uint(interest, 32)
        .store_coins(yt_balance)
        .store_ref(burn)
        .end_cell());
}

(slice, slice, int, int) load_burn_data() method_id {
    (_, _, _, _, _, _, cell burn_data) = load_data();
    slice fc = burn_data.begin_parse();
    return (fc~load_msg_addr(), fc~load_msg_addr(), fc~load_coins(), fc~load_coins());
}

() on_bounce(slice in_msg_body) impure {
}

{-
  Function to send calculated interest to master address.
  Parameters:
  - interest: Interest amount
  - master_address: Master contract address
  - query_id: Query ID
  - ts_master_address: tsTON master contract address
  - owner: Owner address
-}

() send_cacl_interest(int interest, slice master_address, int query_id, slice ts_master_address, slice owner) impure {
    var msg_body = begin_cell()
        .store_uint(op::send_interest(), 32)
        .store_uint(query_id, 64)
        .store_uint(interest, 32)
        .store_slice(ts_master_address)
        .store_slice(owner)
        .end_cell();
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(master_address)
        .store_coins(0)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);
}

{-
  Function used after burning YT/PT jettons 
  which send information to the Master contract how many jettons have been redeemed.
  Parameters:
  - to_address: Master contract address
  - owner_addr: Owner address
  - jetton_amount: Amount of jettons
  - query_id: Query ID
-}

() send_jettons(slice to_address, slice owner_addr, int jetton_amount, int query_id) impure {
    var msg_body = begin_cell()
        .store_uint("redeem_notification"c, 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(owner_addr)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_address)
        .store_coins(100000000)
        .store_uint(1, 107)
        .store_ref(msg_body).end_cell();

    send_raw_message(msg, 0);
}

{-
  Function to burn tokens. It is evoked after validating address of recieved YT/PT tokens from the user.
  Parameters:
  - token_addr: Token address
  - amount: Amount to burn
  - jetton_amount: Jetton amount
  - query_id: Query ID
-}

() burn_token(slice token_addr, int amount, int jetton_amount, int query_id) impure inline {
    var msg_body_pt = begin_cell()
        .store_uint(op::burn(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(my_address())
        .end_cell();

    var msg_pt = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(token_addr)
        .store_coins(amount)
        .store_uint(1, 107)
        .store_ref(msg_body_pt)
        .end_cell();

    send_raw_message(msg_pt, 1 + 16);
}

{-
  Function to validate the wallet address that sent the jettons to the user contract.
  Parameters:
  - token_addr: Token address
  - query_id: Query ID
-}

() validate_wallet_addr(slice token_addr, int query_id) impure inline {
    var msg_body = begin_cell()
        .store_uint(op::provide_wallet_address(), 32)
        .store_uint(query_id, 64)
        .store_slice(my_address())
        .store_uint(0, 1)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(token_addr)
        .store_coins(0)
        .store_uint(1, 107)
        .store_ref(msg_body)
        .end_cell();

    send_raw_message(msg, 64);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_addr = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    int amount = cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    cs~load_coins();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (slice owner_addr, slice master_addr, int maturity, int index, int interest, int yt_balance, cell burn_data) = load_data();
    (slice pt_minter_addr, slice yt_minter_addr, int pt_balance_to_burn, int yt_balance_to_burn) = load_burn_data();

    {-
     "transfer_notification", process the notification of a PT/YT transfer to the user contract.
      Contract recieve such opcode when user want to redeem PT/YT jettons to tsTON.
      After getting this notification, process of redeeming tokens is started.
      This involves loading the amount of jettons recieved from the user, extracting the forward message, 
      and beging proces of user validation. This function also depends on maturity and when it is recieved. 
      After maturity only PT token enougth to redeem the tsTON. For more details please refer to the FIVA's docs.
    -}

    if (op == op::transfer_notification()) {
        int jetton_amounts = in_msg_body~load_coins();

        cell fwd_msg = in_msg_body~load_ref();
        slice fwd_cs = fwd_msg.begin_parse();
        int fwd_op = fwd_cs~load_uint(32);
        int fwd_query_id = fwd_cs~load_uint(64);
        slice pt_addr = fwd_cs~load_msg_addr();
        slice yt_addr = fwd_cs~load_msg_addr();
        slice master_wallet_addr = fwd_cs~load_msg_addr();
        int is_pt = fwd_cs~load_uint(2);

        if (fwd_op == "redeem"c) {
            if (now() < maturity) {
                if is_pt == 0 {
                    validate_wallet_addr(pt_minter_addr, fwd_query_id);

                    save_data(owner_addr, master_addr, maturity, index, interest, yt_balance, begin_cell()
                        .store_slice(pt_minter_addr)
                        .store_slice(yt_minter_addr)
                        .store_coins(jetton_amounts)
                        .store_coins(yt_balance_to_burn)
                        .end_cell());
                } else {
                    validate_wallet_addr(yt_minter_addr, fwd_query_id);
                    save_data(owner_addr, master_addr, maturity, index, interest, yt_balance, begin_cell()
                        .store_slice(pt_minter_addr)
                        .store_slice(yt_minter_addr)
                        .store_coins(pt_balance_to_burn)
                        .store_coins(jetton_amounts)
                        .end_cell());
                }
            } else {
                validate_wallet_addr(pt_minter_addr, fwd_query_id);
                save_data(owner_addr, master_addr, maturity, index, interest, yt_balance, begin_cell()
                    .store_slice(pt_minter_addr)
                    .store_slice(yt_minter_addr)
                    .store_coins(jetton_amounts)
                    .store_coins(yt_balance_to_burn)
                    .end_cell());
            }

            return ();
        }
    }

    {-
     "excesses", process the burning of excess tokens.
    -}

    if (op == op::excesses()) {
        ;; burn PT and YT send excesses op code
        return ();
    }

    {-
      "claim_interest", process the claim of interest.
      This involves loading the new index, calculating the interest earned by the user, updating the interest, 
      and sending the calculated interest to the master contract.
    -}

    if (op == op::claim_interest()) {
        int new_index = in_msg_body~load_uint(32);
        slice ts_master_address = in_msg_body~load_msg_addr();
        int d_interest = yt_balance * ((1000000 / index) - (1000000 / new_index));
        interest += d_interest;
        int new_interest = interest / 1000;
        save_data(owner_addr, master_addr, maturity, index, new_interest, yt_balance, burn_data);
        send_cacl_interest(new_interest, master_addr, query_id, ts_master_address, owner_addr);

        return ();
    }

    {-
      "send_ytbalance_index", update the YT balance and index.
      This involves loading the YT amount, updating the YT balance and index, and saving the new data.
    -}

    if (op == op::send_ytbalance_index()) {
        int yt_mint = in_msg_body~load_coins();
        yt_balance += yt_mint;
        int new_index = in_msg_body~load_uint(32);
        save_data(owner_addr, master_addr, maturity, new_index, interest, yt_balance, burn_data);

        return ();
    }

    {-
      "take_wallet_address", process the logic after validation process. 
      If user pass validation redeem proccess continue. Function logic will be improved in the 
      future, to make protocol more secure. 
      Continuation of redeeming process involves burning the tokens and sending the redeemed amount 
      to the master contract.
    -}
    
    if (op == op::take_wallet_address()) {
        if (in_msg_body.slice_empty?()) {
            ;; todo return tokens to the user, since they haven't pass validation
        } else {
            if (now() > maturity) {
            slice wallet_addr = in_msg_body~load_msg_addr();
            burn_token(wallet_addr, exec_fwd_fee, pt_balance_to_burn, query_id);
            send_jettons(master_addr, owner_addr, pt_balance_to_burn, query_id);
            } else {
            slice wallet_addr = in_msg_body~load_msg_addr();
            burn_token(wallet_addr, exec_fwd_fee, pt_balance_to_burn, query_id);
                if (yt_balance_to_burn == pt_balance_to_burn) {
                        yt_balance -= yt_balance_to_burn;
                        send_jettons(master_addr, owner_addr, pt_balance_to_burn, query_id);
                        save_data(owner_addr,master_addr,maturity,index,interest,yt_balance,burn_data);
                    } else {
                        ;; todo send tokens back to the user
                    }
            }
        }

        return ();
    }

    throw(0xffff);
}

{-
  Below are the get methods for the contract.
  These methods allow retrieving specific pieces of information from the contract's storage.
-}

slice get_master_addr() method_id {
    (_, slice master_addr, _, _, _, _, _) = load_data();
    return master_addr;
}

int get_maturity() method_id {
    (_, _, int maturity, _, _, _, _) = load_data();
    return maturity;
}

int get_index() method_id {
    (_, _, _, int index, _, _, _) = load_data();
    return index;
}

int get_interest() method_id {
    (_, _, _, _, int interest, _, _) = load_data();
    return interest;
}

int get_yt_balance() method_id {
    (_, _, _, _, _, int yt_balance, _) = load_data();
    return yt_balance;
}